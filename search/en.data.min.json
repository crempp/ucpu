[{"id":0,"href":"/ucpu/docs/software/assembler/","title":"Assembler","parent":"Software","content":"Assembler References   customasm\n  ttlcpu\n      "},{"id":1,"href":"/ucpu/docs/software/basic/","title":"Basic","parent":"Software","content":"Basic References   6502 Basic Assembler with source\n      "},{"id":2,"href":"/ucpu/docs/software/operating-system/","title":"Operating System","parent":"Software","content":"Operating System References    "},{"id":3,"href":"/ucpu/docs/cpu-components/general-purpose-register/","title":"General Purpose Registers","parent":"CPU Components","content":"General Purpose Registers Registers are small, fast memory which are close and easily accessible by the core components of the CPU. These are typically used for intermediate and temporary storage for intermediate values or data to be transferred to other areas of the CPU such as memory or IO. A common use is for instruction parameters in the ALU.\n The CPU supports up to four registers: A, B, C and D. Each register has identical functionality. The registers hold 16 bit values and individual bytes are not accessible, only the full 16 bit value.\n Each register has access to multiple busses in the CPU. 16 bit values may be read from the general data bus (d_bus_read) and correspondingly 16 bit values may be written (d_bus_write) to the data bus. Additionally, general purpose registers may write 16 bit values to ALU via the X (x_bus_write) and Y (y_bus_write) bus. Values may not be read from the X and Y bus by the general purpose registers.\n   Note  GPR (rev 1.3) [PDF] [SVG] [PNG]       Register Control Four control signals control the operation of the general purpose register.\n     d_bus_read\n Active high\n Read the contents of the data bus into the register latch\n   d_bus_write\n Active Low\n Write the contents of the register latch onto the data bus\n   x_bus_write\n Active Low\n Write the contents of the register latch onto the X bus to be used by the ALU\n   y_bus_write\n Active Low\n Write the contents of the register latch onto the Y bus to be used by the ALU\n      Appendix Schematic   Figure 1. General Purpose Register Schematic     BOM     Reference Quantity Value Datasheet Digikey Price Total     C1 - C11\n 11\n 1uf\n       C12 - C13\n 2\n 10uf\n       D0 - D15\n 16\n Red LED\n       D16 - D19\n 4\n Amber LED\n       R16 - R19\n 4\n 220R\n       RN1 - RN2\n 2\n 220R\n  Y1221CT-ND\n     U1 - U2\n 2\n 74HCT574\n Datasheet\n      U3 - U10\n 8\n 74HCT245\n Datasheet\n      U11\n 1\n 74HCT125\n Datasheet\n          "},{"id":4,"href":"/ucpu/docs/testing/","title":"Testing","parent":"Docs","content":"Tests\n   GRP\n  Write to DBUS\n  Read from DBUS\n  Write to XBUS\n  Write to YBUS\n     Address Registers\n  Write to DBUS\n  Read from DBUS\n  Write to ABUS\n  Increment\n  Decrement\n      "},{"id":5,"href":"/ucpu/docs/cpu-components/address-register/","title":"Address Register","parent":"CPU Components","content":"Address Register The address register is a register that has the capability of incrementing and decrementing without the use of the ALU. Unlike the GPRs the address registers do not have access to the X and Y bus however they do have access to the address bus. The address registers can read and rewrite from the data bus and write to the address bus.\n   Note  Schematic (rev 1.2) [PDF] [SVG] [PNG]      Register Control Seven control signals control the operation of the address register.\n     d_bus_read\n Active high\n Read the contents of the data bus into the register latch\n   d_bus_write\n Active high\n Write the contents of the register latch onto the data bus\n   a_bus_write\n Active high\n Write the contents of the register latch onto the address bus\n   reg_inc\n Active high\n Increment the register by one\n   reg_dec\n Active high\n Decrement the register by one\n   reg_carry\n Active high\n This line is high if the counter performed a carry in the previous increment/decrement operation\n   reg_borrow\n Active high\n This line is high if the counter performed a borrow in the previous increment/decrement operation\n      Appendix Schematic   Figure 1. Address Purpose Register Schematic     BOM     Reference Quantity Value Datasheet Digikey Price Total     C1 - C12\n 12\n 1uf\n       C13 - C14\n 2\n 10uf\n       D1 - D16\n 16\n Red LED\n       D17 - D23\n 7\n Amber LED\n       RN1 - RN3\n 3\n 220R\n  Y1221CT-ND\n     U1 - U4\n 4\n 74HCT193\n Datasheet\n      U5 - U11\n 7\n 74HCT245\n Datasheet\n      U12\n 1\n 74HCT08\n Datasheet\n        Notes   Breadboard controls (R-L)\n  d_bus_read\n  d_bus_write\n  a_bus_write\n  inc\n  dec\n  carry\n  borrow\n     While counting down or up the other should be held high\n  If not the counter will not work\n  Held high via pull up resistor in case of floating input\n  On reset set to known state (important for PC)\n  On the breadboard the address register 74LS193 is very sensitive to address and data bus levels and pull down resistors must be used on the buses.\n      "},{"id":6,"href":"/ucpu/docs/datasheets/","title":"Datasheets","parent":"Docs","content":"  LS7400\n  74LS04\n  74LS08\n  74LS125\n  74LS139\n  74LS173\n  74LS193\n  74LS245\n  74LS574\n  AT28C64B\n  AS6C6264\n   "},{"id":7,"href":"/ucpu/docs/cpu-components/memory/","title":"Memory","parent":"CPU Components","content":"The memory module has 64 KB of addressable memory space with a base configuration of 16 KB of ROM and 48 KB of RAM. Bank switching is supported extending the available memory to\n   128 KB of RAM (with extension)\n  16 KB of system ROM\n  16 KB of cartridge ROM\n  16 KB of BASIC ROM (extension)\n  16 KB of extra ROM (extension via IO board)\n     Note  Memory (rev 1.0) [PDF] [SVG] [PNG]     Memory Control Four control signals control the operation of the general purpose register.\n     RD\n Active high\n Memory read from the address on the address bus to the data bus\n   WR\n Active high\n Write the contents of the data bus to the address on asserted to the address bus\n   MEMRQ\n Active high\n A memory operation is occurring and the memory module has authority on the address and data buses\n   BANK\n Active high\n Write the contents data bus to the bank register\n      Banking In this description logical banks in the memory map are referred to with the letters A, B, C and D. These banks are what the CPU sees and addresses. The physical memory that a bank refers to can be changed via the bank register. These physical memory areas are called blocks and are referred to with numbers 1, 2, 3, …​. For example, Bank A:0 refers to the A bank set to the first block of ROM. Similarly, D:3 refers to the D bank set to the fourth block of RAM in the memory expansion board.\n Table 1. Memory Map (Banks)     H Addr L Addr Decimal Bank Addr Size     0x00\n 0x00\n 0\n Bank A Rom\n 16 KB\n   …​\n …​\n …​\n   0x3F\n 0xFF\n 16,383\n   0x40\n 0x00\n 16,384\n Bank B RAM\n 16 KB\n   …​\n …​\n …​\n   0x7F\n 0xFF\n 32,767\n   0x80\n 0x00\n 32,768\n Bank C RAM\n 16 KB\n   …​\n …​\n …​\n   0xBF\n 0xFF\n 49,151\n   0xC0\n 0x00\n 49,152\n Bank D RAM\n 16 KB\n   …​\n …​\n …​\n   0xFF\n 0xFF\n 65,535\n    The first three memory banks (A, B, C) can be changed with a special instruction (TODO: Add instruction). Bank A is always a ROM though it could be system, cartrige or I/O ROM. This is because the program counter starts at 0x00 and must have executable code at boot. Bank B is not bankable because that is where the stack resides and banking that area of memory could cause errors.\n The CPU must have the base 16 KB of ROM and 48 KB of RAM installed but the extended banks are optional.\n The memory bank configuration is set via a register in the memory controller. The (Insert instruction here) instruction will write the contents of the A register to the memory bank register. Bank A is controlled by the lower 2 bits (0 and 1) of the register value and banks C and D are controlled by the next two bits (2 and 3) of the register value. As mentioned, bank B can can not be changed. This means there are four configurations for bank A, specifically the system ROM, BASIC ROM, cartrige ROM and IO ROM. Banks C and There are also four configurations for banks C and D.\n A value of 0x00 is the default power on banking value. In this configuration there is no banking. The base 32 KB of ROM and 32 KB of RAM is used.\n Table 2. Bank Register     Value Bank A Bank B Bank C Bank D     0x00\n ROM A:0 (Base A)\n ROM B:0 (BASE B)\n RAM C:0 (Base C)\n ROM D:0 (BASE D)\n   0x01\n ROM A:1 (BASIC)\n ROM B:0 (BASE B)\n RAM C:0 (Base C)\n ROM D:0 (BASE C)\n   0x02\n ROM A:2 (Cart)\n ROM B:0 (BASE B)\n RAM C:0 (Base C)\n ROM D:0 (BASE B)\n   0x03\n ROM A:3 (IO)\n ROM B:0 (BASE B)\n RAM C:0 (Base C)\n ROM D:0 (BASE B)\n   0x00\n ROM A:0 (Base A)\n ROM B:1\n RAM C:1\n ROM D:1\n   0x01\n ROM A:1 (BASIC)\n ROM B:1\n RAM C:1\n ROM D:1\n   0x02\n ROM A:2 (Cart)\n ROM B:1\n RAM C:1\n ROM D:1\n   0x03\n ROM A:3 (IO)\n ROM B:1\n RAM C:1\n ROM D:1\n   0x00\n ROM A:0 (Base A)\n ROM B:2\n RAM C:2\n ROM D:2\n   0x01\n ROM A:1 (BASIC)\n ROM B:2\n RAM C:2\n ROM D:2\n   0x02\n ROM A:2 (Cart)\n ROM B:2\n RAM C:2\n ROM D:2\n   0x03\n ROM A:3 (IO)\n ROM B:2\n RAM C:2\n ROM D:2\n   0x00\n ROM A:0 (Base A)\n ROM B:3\n RAM C:3\n ROM D:3\n   0x01\n ROM A:1 (BASIC)\n ROM B:3\n RAM C:3\n ROM D:3\n   0x02\n ROM A:2 (Cart)\n ROM B:3\n RAM C:3\n ROM D:3\n   0x03\n ROM A:3 (IO)\n ROM B:3\n RAM C:3\n ROM D:3\n      Hardware   ROM and RAM chips have 8-bit data width per chip. Thus needs two chips for 16 bit data bus width\n  ram and rom interleaved between two chips\n     ROM\n  Uses AT28C64 which has 13 address lines and 8 data lines\n  ROM code must be split abababab when programming\n  A ROM set (A\u0026amp;B) with 13 address lines takes up 8 KB in the address space\n  TODO: Figure out if mem module should use MDBus or DBUS???\n     RAM\n  Uses AS6C6264 which has 13 address lines and 8 data lines\n  Similar chip splitting to the ROMs\n  RAM read/write cycles take 55 - 65 ns which translate to about 15 MHz\n        Appendix Schematic   Figure 1. General Purpose Register Schematic     BOM     Reference Quantity Value Datasheet Digikey Price Total     C1 - C27\n 27\n 1uf\n       C41 - C44\n 4\n 10uf\n       D1 - D32\n 32\n        J2 - J3\n 2\n 1x24 pin header\n       RN1 - RN4\n 4\n 220R\n  Y1221CT-ND\n     U1 - U4\n 4\n AT28C64B-15PU\n Datasheet\n      U5 - U16\n 12\n AS6C6264-55PCN\n Datasheet\n      U17\n 1\n 74HCT173\n Datasheet\n      U18 - U19\n 2\n 74HCT139\n Datasheet\n      U20 - U23\n 3\n 74HCT04\n Datasheet\n      U24 - U27\n 4\n 74HCT245\n Datasheet\n        Notes Breadboard controls (R-L)\n   RD\n  WR\n  MEM REQ\n  BANK\n    Reference   Bank Switching\n  Z80 Bank-Switching Scheme\n  Moving From the Exotic 74LS610 MMU to Normal Bank Switching\n      "},{"id":8,"href":"/ucpu/docs/TODO/","title":"TODO","parent":"Docs","content":"TODO:  License file\n  Update all schematics to use HCT rather than LS\n   Documentation\n  Add memory timing diagram to documentation\n  Bank diagram in documentation\n  Create memory map with stack, I/O, Video etc. locations\n   Address Reg\n  Validate connector positions\n   Memory\n Backplane\n  Add pull down resistors to bus\u0026#39;\n   Compliler\n  Web editor for writing code\n  JS compiler\n  JS emulator\n     "},{"id":9,"href":"/ucpu/docs/cpu-components/pipeline/","title":"Pipeline","parent":"CPU Components","content":"Pipeline In Progress\n References   https://www.cs.fsu.edu/~zwang/files/cda3101/Fall2017/Lecture8_cda3101.pdf\n      "},{"id":10,"href":"/ucpu/docs/cpu-components/backplane/","title":"Backplane","parent":"CPU Components","content":"Backplane In Progress\n   Note  Backplane (rev 1.0)[PDF] [SVG] [PNG]       Figure 1. General Purpose Register Schematic      Power\n  Add voltage supervisor LP3470 to provide consistent starting state\n     Reset\n  Design circuit\n  Wait for stable power\n  Low power monitor\n  …​?\n  https://www.grappendorf.net/projects/6502-home-computer/reset-circuit.html\n  https://www.smbaker.com/z80-power-on-reset-circuits\n  https://blog.mark-stevens.co.uk/2020/01/ne555-power-on-reset/\n     Timer\n  Better 555 circuit with 50% duty cycle\n  https://ohmslawcalculator.com/555-astable-calculator\n  https://www.multisim.com/content/d5VPrhr8otpMN6bm34r4JM/555-adjustable-frequency-50-duty-cycle-astable-multivibrator-charge-by-bjt-pull-up/\n  https://www.electronics-tutorials.ws/waveforms/555-circuits-part-1.html\n  Crystal\n     Controls\n  Better denounce https://www.eejournal.com/article/ultimate-guide-to-switch-debounce-part-5/\n     Bus pull up/down where appropriate\n  Add bare test points for all CLK and /CLK, etc points for future bodges :)\n   References    "},{"id":11,"href":"/ucpu/","title":"","parent":"","content":"The µCPU     This is a 16bit pipelined CPU built to be used for experimentation, programming and fun. The CPU is was designed on a breadboard and produced on PCBs in modular architecture utilizing a flexible backplane for expansion and upgrades.\n The objective of the µCPU project is to learn electronics, CPU design and build a fully functional CPU that can be updated, added to and further developed easily.\n The completed project will include 32 Kb ROM, 32 Kb RAM, a pipelined core, serial port, cartridge support, VGA compatible video, stereo multi voice sound and more.\n   Architecture  Figure 1. Early version of the CPU on breadboards    The CPU is being targeted at approximately the PC AT (286) level or Super Nintendo\n   Four general purpose 16 bit registers (A, B, C, D)\n  Four 16 bit address registers (PC, SP, SI, DI)\n  ALU supporting addition, subtraction, shift and bitwise operations\n  Pipelined instructions\n  Clock runs at 4Mhz\n  Banked memory with a base of 32 Kb ROM and 32 Kb RAM, expandable to 304 Kb RAM\n  4 I/O ports for testing and expansion\n  Serial port\n  64k Video memory supporting\n  320×200 in 256 colors\n  640x350 in 4 (or 16???) colors\n  Sprite and effect processing (details TBD)\n  Stereo multi-voice sound (details TBD)\n  A custom bootable OS\n  A BASIC interpreter (ROM)\n  Drive support (SD interface to start with)\n  Cartridge support (ROMs)\n   After the CPU is working I may add\n   DMA\n  …​ more?\n     Figure 2. CPU Architecture      Schematics   GPR (rev 1.3) [PDF] [SVG] [PNG]\n  Address Register (rev 1.2) [PDF] [SVG] [PNG]\n  ALU (rev 1.0) [PDF] [SVG] [PNG]\n  Backplane (rev 1.0)[PDF] [SVG] [PNG]\n  Memory (rev 1.0)[PDF] [SVG] [PNG]\n     BOM TODO\n   Running Documentation The documentation uses Hugo as for static site generation.\n You’ll need go, asciidoctor and hugo\n $ brew install asciidoctor $ brew install hugo   Run\n $ hugo server --minify     "},{"id":12,"href":"/ucpu/docs/","title":"Docs","parent":"","content":""},{"id":13,"href":"/ucpu/docs/cpu-components/","title":"CPU Components","parent":"Docs","content":""},{"id":14,"href":"/ucpu/docs/software/","title":"Software","parent":"Docs","content":""},{"id":15,"href":"/ucpu/categories/","title":"Categories","parent":"","content":""},{"id":16,"href":"/ucpu/tags/","title":"Tags","parent":"","content":""}]